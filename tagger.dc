import RootObject/UD
import TagAvatarManager/UD
import TagManager/AI
import TagGame/AI
import TagPlayer/AI
import TagAvatar/AI
import Cell/AI
import Maze/AI

struct PosterData {
  blob data;
  int32/1000 aspect;
};

struct Color {
  uint8 r;
  uint8 g;
  uint8 b;
};

struct Winner {
  string name;
  Color color;
  int32 score;
};

struct ArtPainting {
  uint8 dir;
  string name;
  Color color;
  PosterData poster;
  blob data;
};

dclass RootObject : DistributedObject {
};

dclass TagAvatarManager : DistributedObject {
  requestAvatar(string name) clsend airecv;
};

dclass TagManager : TimeManager {
  requestNewGame() clsend airecv;
  setSuggestedGameId(uint32 gameId) broadcast ram required;
};

dclass TagGame : DistributedObject {
  requestJoin() clsend airecv;
  setJoin(uint8 success);
  setTimeout(int32 timestamp) broadcast ram required;
  setObjZone(uint32 objZone) broadcast ram required;
  setNumPlayers(int16 numPlayers) broadcast ram required;
  setMazeId(uint32 mazeId) broadcast ram required;

  setWinners(uint8 gameActive, Winner[], ArtPainting[], uint32 nextGameId) broadcast ram required;

  setPoster(PosterData poster) clsend airecv;
};

dclass TagPlayer : DistributedObject {
  setName(string name) broadcast ram required;
  setColor(Color color) broadcast ram required;
  setGameId(uint32 avId) broadcast ram required;
  setAvId(uint32 avId) broadcast ram required;
  setScore(int32 score) broadcast ram required clsend;
  setScoreDerivation(int32 wallCount, int32 floorCount, int32 pixelCount, 
                     int32 avPixelCount, int32 onMePixelCount, 
                     int32/100 bonus) broadcast;
  avatarPixelCount(uint32 avId, int32 count) broadcast clsend;

  setPoster(PosterData poster) clsend airecv;
};

dclass TagAvatar : DistributedSmoothNode {
  setPlayerId(uint32 doId) broadcast ram required ownrecv;
  setZoneInformation(uint32 zoneId, uint32 visZones[]) ownrecv;

  userPaint(blob data) ownsend airecv;
  setPaint(blob data) broadcast ram required;
};

dclass Maze : DistributedObject {
  setSize(uint16 xsize, uint16 ysize) broadcast ram required;
  setNumWalls(uint32 numWalls) broadcast ram required;
};

dclass Cell : DistributedObject {
  setGeometry(uint8 bits, uint16 sx, uint16 sy) broadcast ram required;
  userPaint(uint8 dir, blob data) clsend airecv;

  setPaintNorth(blob data) broadcast ram;
  setPaintSouth(blob data) broadcast ram;
  setPaintEast(blob data) broadcast ram;
  setPaintWest(blob data) broadcast ram;
  setPaintFloor(blob data) broadcast ram;
  setPaintCeiling(blob data) broadcast ram;

  setPoster(uint8 dir, PosterData poster) broadcast ram;
};

